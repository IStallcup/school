Assignment 1
Isaac Stallcup
1/14/2015
CS 271 001


1. Convert the following values to 2's compliment binary, octal, and hex:

a. 	Value:					= -17

	Convert to 2's compliment binary:	= -(1(2^4) + 0(2^3) + 0(2^2) + 0(2^1) + 1(2^0))
						= 0b10001
	Account for sign:			= 0b010001
	Invert bits:				= 0b101110
	Add 1:					= 0b101111

	Convert to octal:			= -(2(8^1) + 1(8^0))
						= -021

	Convert to hexadecimal:			= -(1(16^1) + 1(16^0))
						= -0x11

b.	Value:					= 41

	Convert to 2's compliment binary:	= (2^5) + (2^3) + (2^0)
						= 0b101001
	Account for sign:			= 0b0101001

	Convert to octal:			= 5(8^1) + 1(8^0)
						= 051

	Convert to hexadecimal:			= 2(16^1) + 9(16^0)
						= 0x29

c.	Value:					= -2047

	Convert to 2's compliment binary:	= -(2^10 + 2^9 + 2^8 + 2^7 + 2^6 + 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0)
						= 0b11111111111
	Account for sign:			= 0b011111111111
	Invert bits:				= 0b100000000000
	Add 1:					= 0b100000000001

	Convert to octal:			= -(3(8^3) + 7(8^2) + 7(8^1) + 7(8^0))
						= -3777

	Convert to hexadecimal:			= -(7(16^2) + 15(16^1) + 15(16^0))
						= -0x7FF

d. 	Value:					= 1035903963

	Convert to 2's compliment binary:	= (2^29) + (2^28) + (2^27) + (2^26) + (2^24) + (2^23) + (2^21)
						   + (2^20) + (2^19) + (2^18) + (2^17) + (2^15) + (2^13)
						   + (2^9) + (2^8) + (2^7) + (2^6) + (2^4) + (2^3) + (2^1) + (2^0)
						= 0b111101101111101010001111011011
	Account for sign:			= 0b0111101101111101010001111011011

	Convert to octal:			= 7(8^9) + 5(8^8) + 5(8^7) + 7(8^6) + 5(8^5) + 2(8^4) + (8^3)
						  + 7(8^2) + 3(8^1) + 3(8^0)
						= 07557521733

	Convert to hexadecimal:			= 3(16^7) + 13(16^6) + 11(16^5) + 14(16^4) + 10(16^3) + 3(16^2) 
						  + 13(16^1) + 11(16^0)
						= 0x3DBEA3DB

e.	Value:					= 2147483647

	Convert to 2's compliment binary:	= 2^30 + 2^29 + 2^28 + 2^27 + 2^26 + 2^25 + 2^24 + 2^23 + 2^22 + 2^21
						 + 2^20 + 2^19 + 2^18 + 2^17 + 2^16 + 2^15 + 2^14 + 2^13 + 2^12 + 2^11
						 + 2^10 + 2^9 + 2^8 + 2^7 + 2^6 + 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0
						= 0b1111111111111111111111111111111
	Account for sign:			= 0b01111111111111111111111111111111

	Convert to octal:			= 8^10 + 7(8^9) + 7(8^8) + 7(8^7) + 7(8^6) + 7(8^5) + 7(8^4) + 7(8^3)
						  + 7(8^2) + 7(8^1) + 7(8^0)
						= 017777777777

	Convert to hexadecimal:			= 7(16^7) + 15(16^6) + 15(16^5) + 15(16^4) + 15(16^3) + 15(16^2) + 15(16^1) + 15(16^0)
						= 0x7FFFFFFF

2. Convert the following 2's compliment values to decimal, octal and hex:

a.	Value:					= 0b1010011010101110
						   1: Number < 0
	Subtract 1:				= 0b1010011010101101
	Invert:					= 0b0101100101010010
	
	Convert to decimal:			= -[(2^1) + (2^4) + (2^6) + (2^) + (2^8) + (2^11) + (2^12) + (2^14)]
						= -22866

	Convert to octal:			= -[5(8^4) + 4(8^3) + 5(8^2) + 2(8^1) + 2(8^0)]
						= -054522

	Convert to hexadecimal:			= -[5(16^3) + 9(16^2) + 5(16^1) + 2(16^0)]
						= -0x5952

b.	Value:					= 0b10001110011011111101110101011011
						   1: Number < 0
	Subtract 1:				= 0b10001110011011111101110101011010
	Invert:					= 0b01110001100100000010001010100101

	Convert to decimal:			= -[(2^0) + (2^2) + (2^5) + (2^7) + (2^9) + (2^13) + (2^20) + (2^23)
						    + (2^24) + (2^28) + (2^29) + (2^30)]
						= -1905271461

	Convert to octal:			= -[1(8^10) + 6(8^9) + 1(8^8) + 4(8^7) + 4(8^6) + 0(8^5) + 2(8^4)
						    + 1(8^3) + 2(8^2) + 4(8^1) + 5(8^0)]
						= -016144021245

	Convert to hexadecimal:			= -[7(16^7) + (16^6) + 9(16^5) + 0(16^4) + 2(16^3) + 2(16^2) + 10(16^1) + 5(16^0)]
						= -0x719022A5

c.	Value:					= 0b0111111111111111
						   0: Number > 0

	Convert to decimal:			= (2^0) + (2^1) + (2^2) + (2^3) + (2^4) + (2^5) + (2^6) + (2^7) + (2^8)
						  + (2^9) + (2^10) + (2^11) + (2^12) + (2^13) + (2^14)
						= 32767

	Convert to octal:			= 7(8^4) + 7(8^3) + 7(8^2) + 7(8^1) + 7(8^0)
						= 077777

	Convert to hexadecimal:			= 7(16^3) + 15(16^2) + 15(16^1) + 15(16^0)
						= 7FFF

d.	Value:					= 0b01010101010101010101010101010101
						   0: Number > 0

	Convert to decimal:			= (2^0) + (2^2) + (2^4) + (2^6) + (2^8) + (2^10) + (2^12) + (2^14) + (2^16)
						  + (2^18) + (2^20) + (2^22) + (2^24) + (2^26) + (2^28) + (2^30)
						= 1431655765

	Convert to octal:			= (8^10) + 2(8^9) + 5(8^8) + 2(8^7) + 5(8^6) + 2(8^5) + 5(8^4) + 2(8^3)
						  + 5(8^2) + 2(8^1) + 5(8^0)
						= 012525252525

	Convert to hexadecimal:			= 5(16^7) + 5(16^6) + 5(16^5) + 5(16^4) + 5(16^3) + 5(16^2) + 5(16^1) + 5(16^0)
						= 0x55555555

e. 	Value:					= 0b10011001100110011001100110011001
						    1: Number < 0
	Subtract 1:			 	= 0b10011001100110011001100110011000
	Invert:					= 0b01100110011001100110011001100111

	Convert to decimal:			= (2^0) + (2^1) + (2^2) + (2^5) + (2^6) + (2^9) + (2^10) + (2^13)
						  + (2^14) + (2^17) + (2^18) + (2^21) + (2^22) + (2^25) + (2^26)
						  + (2^29) + (2^30)
						= 1717986919

	Convert to octal:			= (8^10) + 4(8^9) + 6(8^8) + 3(8^7) + (8^6) + 4(8^5) + 6(8^4)
						  + 3(8^3) + (8^2) + 4(8^1) + 7(8^0)
						= 014631463147

	Convert to hexadecimal:			= 6(16^7) + 6(16^6) + 6(16^5) + 6(16^4) + 6(16^3) + 6(16^2) + 6(16^1) 7(16^0)
						= 0x66666667

3. 	Describe the concept of a data bus.

A data bus is what ferries information between peripherals and other parts of the computer;
specifically between expansion slots (mainly graphics adapters), the CPU and memory.

4. What is a bit, and where does it come from?

A bit is a physical representation of a binary 0 or 1. It comes from the charge on a transistor switch, either
1 (the switch has voltage) or 0 (the switch does not have voltage).

5. How large is a byte?

A byte is 8 contiguous bits.

6. In the context of computer programming, what is a word, and how large is it?

A word is 2 contiguous bytes, and consequently is 16 bits.

7. What are the 8 general purpose registers?

EAX (simple math), EBX, ECX (counting), EDX (free), ESI (source, for pointers), EDI(destination, for pointers),
EBP (base pointer), and ESP (stack pointer).

8. What assembler are we using, and where can you access it?

NASM; it is located on the flip server which we can access with PuTTy.

